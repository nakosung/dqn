layers {
  name: "frames_input_layer"
  type: MEMORY_DATA
  top: "frames"
  top: "dummy1"
  memory_data_param {
	batch_size: {{BATCH_SIZE}}
	channels: {{IMAGE_CHANNELS}}
	height: {{SIGHT_SIZE}}
	width: {{SIGHT_SIZE}}
  }
}	
layers {
  name: "stats_input_layer"
  type: MEMORY_DATA
  top: "stats"
  top: "dummy1_stats"
  memory_data_param {
	batch_size: {{BATCH_SIZE}}
	channels: {{STAT_CHANNELS}}
	height: 1
	width: 1
  }
}	
layers {
  name: "target_input_layer"
  type: MEMORY_DATA
  top: "target"
  top: "dummy2"
  memory_data_param {
	batch_size: {{BATCH_SIZE}}
	channels: {{NUM_ACTIONS}}
	height: 1
	width: 1
  }
}
layers {
  name: "filter_input_layer"
  type: MEMORY_DATA
  top: "filter"
  top: "dummy3"
  memory_data_param {
	batch_size: {{BATCH_SIZE}}
	channels: {{NUM_ACTIONS}}
	height: 1
	width: 1
  }
}
layers {
  name: "silence_layer"
  type: SILENCE
  bottom: "dummy1"
  bottom: "dummy1_stats"
  bottom: "dummy2"
  bottom: "dummy3"
}
layers {
  name: "conv1_layer"
  type: CONVOLUTION
  bottom: "frames"
  top: "conv1"
  convolution_param {
	num_output: {{LOWLEVEL_IMAGE_FEATURE_SIZE}}
	kernel_size: {{LOWLEVEL_KERNEL_SIZE}}
	stride: {{LOWLEVEL_KERNEL_STRIDE}}
	weight_filler {
	  type: "gaussian"
	  std: 0.01
	}
  }
}
layers {
  name: "conv1_relu_layer"
  type: RELU
  bottom: "conv1"
  top: "conv1"
  relu_param {
	negative_slope: 0.01
  }
}
layers {
  name: "conv2_layer"
  type: CONVOLUTION
  bottom: "conv1"
  top: "conv2"
  convolution_param {
	num_output: {{IMAGE_FEATURE_SIZE}}
	kernel_size: {{KERNEL_SIZE}}
	stride: {{KERNEL_STRIDE}}
	weight_filler {
	  type: "gaussian"
	  std: 0.01
	}
  }
}
layers {
  name: "conv2_relu_layer"
  type: RELU
  bottom: "conv2"
  top: "conv2"
  relu_param {
	negative_slope: 0.01
  }
}
layers {
  name: "flatten"
  type: FLATTEN
  bottom: "conv2"
  top: "flatten"
}
layers {
  name: "concat"
  type: CONCAT
  bottom: "flatten"
  bottom: "stats"
  top: "concat"
}
layers {
  name: "ip1_layer"
  type: INNER_PRODUCT
  bottom: "concat"
  top: "ip1"
  inner_product_param {
	num_output: {{HIDDEN_LAYER_SIZE}}
	weight_filler {
	  type: "gaussian"
	  std: 0.01
	}
  }
}
layers {
  name: "ip1_relu_layer"
  type: RELU
  bottom: "ip1"
  top: "ip1"
  relu_param {
	negative_slope: 0.01
  }
}
layers {
  name: "ip2_layer"
  type: INNER_PRODUCT
  bottom: "ip1"
  top: "q_values"
  inner_product_param {
	num_output: {{NUM_ACTIONS}}
	weight_filler {
	  type: "gaussian"
	  std: 0.01
	}
  }
}
layers {
  name: "eltwise_layer"
  type: ELTWISE
  bottom: "q_values"
  bottom: "filter"
  top: "filtered_q_values"
  eltwise_param {
	operation: PROD
  }
}
layers {
  name: "loss"
  type: EUCLIDEAN_LOSS
  bottom: "filtered_q_values"
  bottom: "target"
  top: "loss"
}